document.addEventListener("DOMContentLoaded", function () {
  // Elemente DOM
  const chatWindow = document.getElementById("chat-window");
  const closeChat = document.getElementById("close-chat");
  const chatMessages = document.getElementById("chat-messages");
  const fileInput = document.getElementById("pdfFile");
  const sendButton = document.getElementById("send-button");
  const loadingMessage = document.getElementById("loadingMessage");
  const selectedFileContainer = document.getElementById(
    "selected-file-container"
  );
  const selectedFileName = document.getElementById("selected-file-name");
  const removeFileButton = document.getElementById("remove-file");
  const questionInput = document.getElementById("question-input");
  const askButton = document.getElementById("ask-button");

  let isInitialized = false;

  // open chatbot window
  function openChat() {
    chatWindow.classList.remove("hidden");

    // add welcome message
    if (!isInitialized) {
      chatMessages.innerHTML = "";
      addBotMessage(
        `<div class="welcome-message">
          <div class="welcome-header">
            <span class="welcome-icon">ðŸ‘‹</span>
            <h2>Welcome to ScanIQ AI</h2>
          </div>
          <div class="welcome-content">
            <div class="feature-card">
              <div class="feature-icon">ðŸ“„</div>
              <div class="feature-text">
                <h3>PDF Analysis</h3>
                <p>Upload your security report for detailed vulnerability analysis</p>
              </div>
            </div>
            <div class="feature-card">
              <div class="feature-icon">ðŸ’¬</div>
              <div class="feature-text">
                <h3>Security Q&A</h3>
                <p>Ask any security-related questions and get expert answers</p>
              </div>
            </div>
          </div>
        </div>`
      );
      isInitialized = true;
    }
  }

  // close chatbot window
  closeChat.addEventListener("click", function () {
    chatWindow.classList.add("hidden");
  });

  document.querySelectorAll(".open-chat").forEach((element) => {
    element.addEventListener("click", function (event) {
      event.preventDefault();
      openChat();
    });
  });

  // bot messages formated as HTML
  function addBotMessage(message) {
    const messageElement = document.createElement("div");
    messageElement.className = "message bot-message";

    messageElement.innerHTML = message;

    chatMessages.appendChild(messageElement);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  // add user message
  function addUserMessage(message) {
    const messageElement = document.createElement("div");
    messageElement.className = "message user-message";
    messageElement.textContent = message;
    chatMessages.appendChild(messageElement);
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  // file upload
  fileInput.addEventListener("change", function () {
    if (fileInput.files.length > 0) {
      selectedFileName.textContent = fileInput.files[0].name;
      selectedFileContainer.classList.add("active");
      sendButton.disabled = false;
    }
  });

  // remove uploaded file
  removeFileButton.addEventListener("click", function (e) {
    e.stopPropagation();
    fileInput.value = "";
    selectedFileContainer.classList.remove("active");
    sendButton.disabled = true;
  });

  // send file to server
  sendButton.addEventListener("click", async function () {
    if (fileInput.files.length === 0) {
      return;
    }

    const formData = new FormData();
    formData.append("file", fileInput.files[0]);

    addUserMessage(`File uploaded: ${fileInput.files[0].name}`);

    // loading animation
    loadingMessage.classList.remove("hidden");

    // fetch request from OpenAI API
    try {
      // const response = await fetch("http://localhost:5200/api/upload-pdf", {
      const response = await fetch("http://localhost:5200/api/upload-pdf", {
        method: "POST",
        body: formData,
      });

      const data = await response.json();
      loadingMessage.classList.add("hidden");

      if (data.success) {
        addBotMessage(data.analysis);
      } else {
        addBotMessage(
          `An error occurred: ${
            data.error || "The file could not be analyzed."
          }`
        );
      }
    } catch (error) {
      loadingMessage.classList.add("hidden");
      addBotMessage(`Could not connect to the server: ${error.message}`);
    }

    // reset upload form
    fileInput.value = "";
    selectedFileContainer.classList.remove("active");
    sendButton.disabled = true;

    chatMessages.scrollTop = chatMessages.scrollHeight;
  });

  // Handle security questions
  askButton.addEventListener("click", async function () {
    const question = questionInput.value.trim();
    if (!question) return;

    await handleUserMessage(question);
    questionInput.value = "";
  });

  // Allow Enter key to submit question
  questionInput.addEventListener("keypress", function (e) {
    if (e.key === "Enter") {
      askButton.click();
    }
  });

  // initialize chatbot
  if (!chatWindow.classList.contains("hidden")) {
    if (!isInitialized) {
      chatMessages.innerHTML = "";
      addBotMessage(
        `<div class="welcome-message">
          <div class="welcome-header">
            <span class="welcome-icon">ðŸ‘‹</span>
            <h2>Welcome to ScanIQ AI</h2>
          </div>
          <div class="welcome-content">
            <div class="feature-card">
              <div class="feature-icon">ðŸ“„</div>
              <div class="feature-text">
                <h3>PDF Analysis</h3>
                <p>Upload your security report for detailed vulnerability analysis</p>
              </div>
            </div>
            <div class="feature-card">
              <div class="feature-icon">ðŸ’¬</div>
              <div class="feature-text">
                <h3>Security Q&A</h3>
                <p>Ask any security-related questions and get expert answers</p>
              </div>
            </div>
          </div>
        </div>`
      );
      isInitialized = true;
    }
  }

  async function handleUserMessage(message) {
    loadingMessage.classList.remove("hidden");
    addUserMessage(message);

    try {
        const response = await fetch("http://localhost:5200/api/security-question", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ question: message })
        });

        const data = await response.json();
        loadingMessage.classList.add("hidden");
        
        if (data.success) {
            // Simply display the answer without the knowledge base indicator
            addBotMessage(data.answer);
        } else {
            // Handle error with more user-friendly message
            addBotMessage(`I apologize, but I'm having trouble processing your question right now. ${data.error}`);
        }
    } catch (error) {
        console.error('Error:', error);
        loadingMessage.classList.add("hidden");
        addBotMessage('I apologize, but I\'m having trouble connecting to the server right now. Please try again later.');
    }

    chatMessages.scrollTop = chatMessages.scrollHeight;
  }
});
