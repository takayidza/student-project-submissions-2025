SECURITY_KNOWLEDGE_BASE = {
    "xss": {
        "keywords": ["xss", "cross-site scripting", "cross site scripting"],
        "answer": """
<div class="security-answer">
    <h3>Cross-Site Scripting (XSS)</h3>
    <p>Cross-Site Scripting (XSS) is a web security vulnerability that allows attackers to inject malicious scripts into web pages viewed by other users.</p>
    <div class="best-practices">
        <h4>Key Points:</h4>
        <ul>
            <li>XSS attacks can steal user data, session cookies, or perform actions on behalf of users</li>
            <li>There are three main types: Stored XSS, Reflected XSS, and DOM-based XSS</li>
            <li>Always validate and sanitize user input</li>
        </ul>
    </div>
    <div class="resources">
        <h4>Learn More:</h4>
        <ul>
            <li><a href="https://owasp.org/www-community/attacks/xss/" target="_blank">OWASP XSS Prevention Cheat Sheet</a></li>
        </ul>
    </div>
</div>
"""
    },
    "sql injection": {
        "keywords": ["sql injection", "sql injection attack", "sql inject"],
        "answer": """
<div class="security-answer">
    <h3>SQL Injection</h3>
    <p>SQL Injection is a code injection technique that exploits vulnerabilities in database-driven applications by inserting malicious SQL statements into input fields.</p>
    <div class="best-practices">
        <h4>Key Points:</h4>
        <ul>
            <li>Use parameterized queries or prepared statements</li>
            <li>Validate and sanitize all user inputs</li>
            <li>Implement proper error handling</li>
            <li>Use the principle of least privilege for database accounts</li>
        </ul>
    </div>
    <div class="resources">
        <h4>Learn More:</h4>
        <ul>
            <li><a href="https://owasp.org/www-community/attacks/SQL_Injection" target="_blank">OWASP SQL Injection Guide</a></li>
        </ul>
    </div>
</div>
"""
    },
    "csrf": {
        "keywords": ["csrf", "cross-site request forgery", "cross site request forgery"],
        "answer": """
<div class="security-answer">
    <h3>Cross-Site Request Forgery (CSRF)</h3>
    <p>CSRF is an attack that forces authenticated users to execute unwanted actions on a web application in which they're currently authenticated.</p>
    <div class="best-practices">
        <h4>Key Points:</h4>
        <ul>
            <li>Use CSRF tokens in forms</li>
            <li>Implement SameSite cookie attribute</li>
            <li>Verify the Origin and Referer headers</li>
            <li>Use custom request headers for AJAX requests</li>
        </ul>
    </div>
    <div class="resources">
        <h4>Learn More:</h4>
        <ul>
            <li><a href="https://owasp.org/www-community/attacks/csrf" target="_blank">OWASP CSRF Prevention Guide</a></li>
        </ul>
    </div>
</div>
"""
    },
    "security headers": {
        "keywords": ["security headers", "http security headers", "security header"],
        "answer": """
<div class="security-answer">
    <h3>Security Headers</h3>
    <p>Security headers are HTTP response headers that your web server can use to increase the security of your web application.</p>
    <div class="best-practices">
        <h4>Key Points:</h4>
        <ul>
            <li>Content-Security-Policy (CSP): Prevents XSS and other injection attacks</li>
            <li>X-Frame-Options: Prevents clickjacking attacks</li>
            <li>X-Content-Type-Options: Prevents MIME-type sniffing</li>
            <li>Strict-Transport-Security (HSTS): Enforces HTTPS</li>
        </ul>
    </div>
    <div class="resources">
        <h4>Learn More:</h4>
        <ul>
            <li><a href="https://owasp.org/www-project-secure-headers/" target="_blank">OWASP Secure Headers Project</a></li>
        </ul>
    </div>
</div>
"""
    },
    "authentication": {
        "keywords": ["authentication", "login security", "user authentication", "secure login"],
        "answer": """
<div class="security-answer">
    <h3>Secure Authentication</h3>
    <p>Authentication is the process of verifying the identity of a user, device, or system.</p>
    <div class="best-practices">
        <h4>Key Points:</h4>
        <ul>
            <li>Use strong password policies</li>
            <li>Implement multi-factor authentication (MFA)</li>
            <li>Use secure session management</li>
            <li>Implement account lockout after failed attempts</li>
            <li>Use HTTPS for all authentication requests</li>
        </ul>
    </div>
    <div class="resources">
        <h4>Learn More:</h4>
        <ul>
            <li><a href="https://owasp.org/www-project-cheat-sheets/cheatsheets/Authentication_Cheat_Sheet.html" target="_blank">OWASP Authentication Cheat Sheet</a></li>
        </ul>
    </div>
</div>
"""
    },
    "password security": {
        "keywords": ["password security", "strong password", "password policy", "password best practices"],
        "answer": """
<div class="security-answer">
    <h3>Password Security Best Practices</h3>
    <p>Strong password security is crucial for protecting user accounts and sensitive data.</p>
    <div class="best-practices">
        <h4>Key Points:</h4>
        <ul>
            <li>Use passwords with at least 12 characters</li>
            <li>Include a mix of uppercase, lowercase, numbers, and special characters</li>
            <li>Never reuse passwords across different accounts</li>
            <li>Use a password manager to generate and store strong passwords</li>
            <li>Enable two-factor authentication whenever possible</li>
        </ul>
    </div>
    <div class="resources">
        <h4>Learn More:</h4>
        <ul>
            <li><a href="https://owasp.org/www-community/attacks/Password_Spraying_Attack" target="_blank">OWASP Password Security Guide</a></li>
        </ul>
    </div>
</div>
"""
    },
    "https": {
        "keywords": ["https", "ssl", "tls", "secure connection", "ssl certificate"],
        "answer": """
<div class="security-answer">
    <h3>HTTPS and SSL/TLS Security</h3>
    <p>HTTPS (Hypertext Transfer Protocol Secure) is a secure version of HTTP that uses SSL/TLS encryption to protect data in transit.</p>
    <div class="best-practices">
        <h4>Key Points:</h4>
        <ul>
            <li>Always use HTTPS for all web traffic</li>
            <li>Keep SSL/TLS certificates up to date</li>
            <li>Use strong encryption protocols (TLS 1.2 or higher)</li>
            <li>Implement HSTS (HTTP Strict Transport Security)</li>
            <li>Regularly check for certificate expiration</li>
        </ul>
    </div>
    <div class="resources">
        <h4>Learn More:</h4>
        <ul>
            <li><a href="https://owasp.org/www-community/attacks/Transport_Layer_Protection_Cheat_Sheet" target="_blank">OWASP Transport Layer Protection Guide</a></li>
        </ul>
    </div>
</div>
"""
    },
    "file upload security": {
        "keywords": ["file upload", "file upload security", "secure file upload", "file validation"],
        "answer": """
<div class="security-answer">
    <h3>Secure File Upload Practices</h3>
    <p>File upload functionality can be a significant security risk if not properly implemented.</p>
    <div class="best-practices">
        <h4>Key Points:</h4>
        <ul>
            <li>Validate file types using both extension and content checking</li>
            <li>Implement file size limits</li>
            <li>Scan uploaded files for malware</li>
            <li>Store files outside the web root directory</li>
            <li>Use random file names to prevent overwriting</li>
            <li>Implement proper access controls</li>
        </ul>
    </div>
    <div class="resources">
        <h4>Learn More:</h4>
        <ul>
            <li><a href="https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload" target="_blank">OWASP File Upload Security Guide</a></li>
        </ul>
    </div>
</div>
"""
    },
    "api security": {
        "keywords": ["api security", "rest api security", "api authentication", "secure api"],
        "answer": """
<div class="security-answer">
    <h3>API Security Best Practices</h3>
    <p>APIs need robust security measures to protect data and prevent unauthorized access.</p>
    <div class="best-practices">
        <h4>Key Points:</h4>
        <ul>
            <li>Use strong authentication (OAuth 2.0, API keys)</li>
            <li>Implement rate limiting to prevent abuse</li>
            <li>Use HTTPS for all API endpoints</li>
            <li>Validate and sanitize all input data</li>
            <li>Implement proper error handling</li>
            <li>Use API versioning</li>
        </ul>
    </div>
    <div class="resources">
        <h4>Learn More:</h4>
        <ul>
            <li><a href="https://owasp.org/www-project-api-security/" target="_blank">OWASP API Security Project</a></li>
        </ul>
    </div>
</div>
"""
    },
    "session management": {
        "keywords": ["session management", "session security", "session hijacking", "session timeout"],
        "answer": """
<div class="security-answer">
    <h3>Secure Session Management</h3>
    <p>Proper session management is essential for maintaining user security and preventing session-based attacks.</p>
    <div class="best-practices">
        <h4>Key Points:</h4>
        <ul>
            <li>Use secure session IDs</li>
            <li>Implement session timeout</li>
            <li>Regenerate session IDs after login</li>
            <li>Use secure and HttpOnly cookies</li>
            <li>Implement proper session invalidation</li>
            <li>Monitor for suspicious session activity</li>
        </ul>
    </div>
    <div class="resources">
        <h4>Learn More:</h4>
        <ul>
            <li><a href="https://owasp.org/www-community/attacks/Session_Management_Cheat_Sheet" target="_blank">OWASP Session Management Guide</a></li>
        </ul>
    </div>
</div>
"""
    }
}

def find_matching_answer(question):
    """
    Find a matching answer from the knowledge base based on the question.
    Returns None if no match is found.
    """
    question = question.lower()
    
    for topic, data in SECURITY_KNOWLEDGE_BASE.items():
        if any(keyword in question for keyword in data["keywords"]):
            return data["answer"]
    
    return None 