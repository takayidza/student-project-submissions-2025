from flask import Flask, request, jsonify
import os
import tempfile
import PyPDF2
import requests
from dotenv import load_dotenv
from flask_cors import CORS
from security_knowledge_base import find_matching_answer

load_dotenv()

app = Flask(__name__)
CORS(app, resources={r"/*": {"origins": "*", "supports_credentials": True}})

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_ENDPOINT = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"

def call_gemini_api(prompt):
    try:
        headers = {
            "Content-Type": "application/json"
        }
        body = {
            "contents": [
                {
                    "parts": [
                        {"text": prompt}
                    ]
                }
            ]
        }

        response = requests.post(GEMINI_ENDPOINT, json=body, headers=headers)
        response.raise_for_status()

        candidates = response.json().get("candidates", [])
        if candidates:
            return candidates[0]["content"]["parts"][0]["text"]
        else:
            return "No response from Gemini model."

    except Exception as e:
        return f"Error from Gemini API: {str(e)}"

def extract_text_from_pdf(pdf_file):
    text = ""
    try:
        with tempfile.NamedTemporaryFile(delete=False) as temp_file:
            pdf_file.save(temp_file.name)
            with open(temp_file.name, 'rb') as file:
                pdf_reader = PyPDF2.PdfReader(file)
                max_pages = min(2, len(pdf_reader.pages))
                for page_num in range(max_pages):
                    page = pdf_reader.pages[page_num]
                    page_text = page.extract_text()
                    text += page_text
    finally:
        try:
            os.unlink(temp_file.name)
        except:
            pass
    return text[:8000] if text else ""

def analyze_vulnerabilities(pdf_text):
    prompt = f"""
You are a cybersecurity expert analyzing web vulnerabilities.

Analyze this security report and identify the main vulnerabilities. For each vulnerability:
1. Name the vulnerability clearly
2. Rate its severity (Critical/High/Medium/Low)
3. Provide a detailed description of what the vulnerability is and its security implications
4. Include one helpful resource about this vulnerability

FORMAT YOUR RESPONSE IN HTML using this structure:

<div class="vulnerability">
    <h3>[Vulnerability Name]</h3>
    <p><strong>ðŸš¨ Severity:</strong> [Critical/High/Medium/Low]</p>
    <p><strong>ðŸ’¥ Description:</strong> [Detailed explanation of what this vulnerability is, how it works, and why it's dangerous]</p>
    <p><strong>ðŸ“š Resources:</strong></p>
    <ul class="resources">
        <li><a href="[URL to resource about this vulnerability]" target="_blank">[Name of resource]</a></li>
    </ul>
</div>

[Repeat for each vulnerability]

{pdf_text}
"""
    answer = call_gemini_api(prompt)
    return {
        "success": True,
        "analysis": answer
    }

def answer_security_question(question):
    fallback_answer = find_matching_answer(question)
    if fallback_answer:
        return {
            "success": True,
            "answer": fallback_answer,
            "source": "knowledge_base"
        }

    prompt = f"""
You are a cybersecurity expert answering questions about web security and vulnerabilities.

Please provide a clear, concise, and practical answer to the following security question.
Focus on the most important aspects and include actionable advice.

Question: {question}

FORMAT YOUR RESPONSE IN HTML using this structure:

<div class="security-answer">
    <h3>Answer</h3>
    <p>[Your clear and concise answer here]</p>
    <div class="best-practices">
        <h4>Key Points:</h4>
        <ul>
            <li>[Most important point 1]</li>
            <li>[Most important point 2]</li>
            <li>[Most important point 3]</li>
        </ul>
    </div>
    <div class="resources">
        <h4>Learn More:</h4>
        <ul>
            <li><a href="[URL]" target="_blank">[Resource name]</a></li>
        </ul>
    </div>
</div>
"""
    answer = call_gemini_api(prompt)
    return {
        "success": True,
        "answer": answer,
        "source": "gemini"
    }

@app.route('/api/upload-pdf', methods=['POST'])
def upload_pdf():
    if 'file' not in request.files:
        return jsonify({"success": False, "error": "No file has been uploaded"}), 400

    pdf_file = request.files['file']

    if not pdf_file.filename.endswith('.pdf'):
        return jsonify({"success": False, "error": "The file must be in PDF format"}), 400

    if pdf_file.content_length and pdf_file.content_length > 2 * 1024 * 1024:
        return jsonify({"success": False, "error": "File size exceeds 2MB limit"}), 413

    try:
        pdf_text = extract_text_from_pdf(pdf_file)
        if not pdf_text:
            return jsonify({"success": False, "error": "Text could not be extracted from the PDF"}), 400

        result = analyze_vulnerabilities(pdf_text)
        return jsonify(result)

    except Exception as e:
        import traceback
        print(f"Error: {traceback.format_exc()}")
        return jsonify({"success": False, "error": str(e)}), 500

@app.route('/api/security-question', methods=['POST'])
def handle_security_question():
    data = request.get_json()
    if not data or 'question' not in data:
        return jsonify({"success": False, "error": "No question provided"}), 400

    result = answer_security_question(data['question'])
    return jsonify(result)

if __name__ == '__main__':
    app.run(debug=True, host="0.0.0.0", port=5200)
