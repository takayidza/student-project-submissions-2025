# Generated by Django 5.2 on 2025-05-07 14:24

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Policy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('category', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(choices=[('Admin', 'Admin'), ('User', 'User')], default='Admin', max_length=5)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_permissions_set', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(max_length=100)),
                ('machine_id', models.CharField(default='Allan', max_length=100)),
                ('ip_address', models.CharField(default='127.0.0.1', max_length=100)),
                ('hostname', models.CharField(max_length=100)),
                ('os', models.CharField(choices=[('Windows', 'Windows'), ('Windows Server', 'Windows Server'), ('macOS', 'macOS'), ('Ubuntu', 'Ubuntu'), ('Debian', 'Debian'), ('Fedora', 'Fedora'), ('Red Hat', 'Red Hat Enterprise Linux'), ('CentOS', 'CentOS'), ('SUSE', 'SUSE Linux'), ('Arch Linux', 'Arch Linux'), ('Kali Linux', 'Kali Linux'), ('FreeBSD', 'FreeBSD'), ('OpenBSD', 'OpenBSD'), ('iOS', 'iOS'), ('iPadOS', 'iPadOS'), ('Android', 'Android'), ('Chrome OS', 'Chrome OS'), ('Solaris', 'Solaris'), ('IBM AIX', 'IBM AIX'), ('HP-UX', 'HP-UX')], max_length=50)),
                ('last_scan', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('warning', 'Warning'), ('non-compliant', 'Non-Compliant'), ('compliant', 'Compliant')], default='non-compliant', max_length=20)),
                ('actions', models.TextField()),
                ('device_type', models.CharField(choices=[('desktop', 'Desktop'), ('laptop', 'Laptop'), ('mobile', 'Mobile'), ('server', 'Server')], default='laptop', max_length=10)),
                ('cpu_usage', models.FloatField(default=0.0)),
                ('memory_usage', models.FloatField(default=0.0)),
                ('disk_usage', models.FloatField(default=0.0)),
                ('network_download_speed', models.FloatField(default=0.0)),
                ('network_upload_speed', models.FloatField(default=0.0)),
                ('json_data', models.JSONField(blank=True, null=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ActivityReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scan_time', models.DateTimeField(auto_now_add=True)),
                ('scan_status', models.CharField(choices=[('warning', 'Warning'), ('non-compliant', 'Non-Compliant'), ('compliant', 'Compliant')], default='non-compliant', max_length=50)),
                ('compliance_status', models.CharField(choices=[('compliant', 'Compliant'), ('non-compliant', 'Non-Compliant'), ('warning', 'Warning')], default='non-compliant', max_length=20)),
                ('actions_taken', models.TextField()),
                ('scan_report', models.TextField()),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_report_set', to='management.device')),
            ],
        ),
        migrations.CreateModel(
            name='InstalledSoftware',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('version', models.CharField(max_length=50)),
                ('publisher', models.CharField(max_length=100)),
                ('install_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('approved', 'Approved'), ('restricted', 'Restricted'), ('blocked', 'Blocked')], default='approved', max_length=50)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='installedsoftware', to='management.device')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('warning', 'Warning'), ('non-compliant', 'Non-Compliant'), ('compliant', 'Compliant')], default='non-compliant', max_length=20)),
                ('message', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('read', models.BooleanField(default=False)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='management.device')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('policy', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='management.policy')),
            ],
        ),
        migrations.CreateModel(
            name='PolicyCriteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('criteria_type', models.CharField(choices=[('device_type', 'Device Type'), ('os_version', 'OS Version'), ('last_scan_time', 'Last Scan Time'), ('installed_software', 'Software Installed')], max_length=255)),
                ('condition', models.CharField(choices=[('equals', 'Equals'), ('contains', 'Contains'), ('minimum', 'Minimum'), ('maximum', 'Maximum')], default='equals', max_length=255)),
                ('value', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='criteria', to='management.policy')),
            ],
        ),
        migrations.CreateModel(
            name='BlockedSoftware',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the blocked software', max_length=255)),
                ('publisher', models.CharField(blank=True, help_text='Publisher or vendor of the software', max_length=255)),
                ('applicable_os', models.CharField(choices=[('all', 'All Operating Systems'), ('Windows', 'Windows'), ('Windows Server', 'Windows Server'), ('macOS', 'macOS'), ('Ubuntu', 'Ubuntu'), ('Debian', 'Debian'), ('Fedora', 'Fedora'), ('Red Hat', 'Red Hat Enterprise Linux'), ('CentOS', 'CentOS'), ('SUSE', 'SUSE Linux'), ('Arch Linux', 'Arch Linux'), ('Kali Linux', 'Kali Linux'), ('FreeBSD', 'FreeBSD'), ('OpenBSD', 'OpenBSD'), ('iOS', 'iOS'), ('iPadOS', 'iPadOS'), ('Android', 'Android'), ('Chrome OS', 'Chrome OS'), ('Solaris', 'Solaris'), ('IBM AIX', 'IBM AIX'), ('HP-UX', 'HP-UX')], default='all', help_text='OS this block applies to', max_length=50)),
                ('description', models.TextField(blank=True, help_text='Description of why this software is blocked')),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Severity level of this violation', max_length=10)),
                ('active', models.BooleanField(default=True, help_text='Whether this block is active')),
                ('detection_pattern', models.CharField(blank=True, help_text='Regex pattern to detect this software', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_blocks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-severity', 'name'],
                'indexes': [models.Index(fields=['name'], name='management__name_2f061f_idx'), models.Index(fields=['applicable_os'], name='management__applica_7e91af_idx'), models.Index(fields=['active'], name='management__active_1b4d8f_idx'), models.Index(fields=['severity'], name='management__severit_dffc61_idx')],
                'unique_together': {('name', 'publisher', 'applicable_os')},
            },
        ),
    ]
