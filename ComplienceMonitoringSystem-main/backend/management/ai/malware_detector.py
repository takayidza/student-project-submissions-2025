import joblib
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from pathlib import Path
import os
import re

MODEL_PATH = Path(__file__).parent / 'models' / 'malware_model.joblib'
VECTORIZER_PATH = Path(__file__).parent / 'models' / 'malware_vectorizer.joblib'


class MalwareDetector:
    def __init__(self):
        self.model = None
        self.vectorizer = None
        self.load_models()

    def load_models(self):
        if os.path.exists(MODEL_PATH) and os.path.exists(VECTORIZER_PATH):
            self.model = joblib.load(MODEL_PATH)
            self.vectorizer = joblib.load(VECTORIZER_PATH)
        else:
            self.vectorizer = TfidfVectorizer(
                ngram_range=(1, 2),
                max_features=10000,
                stop_words='english'
            )
            self.model = LogisticRegression(max_iter=1000)
            # In production, you'd load pre-trained weights

    def save_models(self):
        os.makedirs(MODEL_PATH.parent, exist_ok=True)
        joblib.dump(self.model, MODEL_PATH)
        joblib.dump(self.vectorizer, VECTORIZER_PATH)

    def preprocess_text(self, text):
        """Clean and normalize text for analysis"""
        text = text.lower()
        text = re.sub(r'[^a-z0-9\s]', '', text)
        return text

    def assess_risk(self, name, publisher, version):
        """Predict risk score for software"""
        # Combine features
        text = f"{name} {publisher} {version}"
        text = self.preprocess_text(text)

        if not self.vectorizer.vocabulary_:  # If not fitted
            return 0.5  # Neutral score if model not ready

        features = self.vectorizer.transform([text])
        risk_score = self.model.predict_proba(features)[0, 1]  # Probability of being malicious
        return float(risk_score)

    def train_model(self, texts, labels):
        """Train or retrain the model"""
        cleaned_texts = [self.preprocess_text(t) for t in texts]
        features = self.vectorizer.fit_transform(cleaned_texts)
        self.model.fit(features, labels)
        self.save_models()