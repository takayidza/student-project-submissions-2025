@model List<SensorReading>

@{
    ViewData["Title"] = "Real-Time Water Quality Monitoring";
}

@if (ViewData["Message"] != null)
{
    <div class="alert alert-danger">
        <p>Sensor not found</p>
    </div>
}

<h2>Real-Time Water Quality Monitoring</h2>
<p id="receiver-p"></p>
<div class="row">
    <div class="col-md-6">
        <h3>pH Level</h3>
        <canvas id="phChart"></canvas>
    </div>
    <div class="col-md-6">
        <h3>Water Level</h3>
        <canvas id="waterLevelChart"></canvas>
    </div>
    <div class="col-md-6">
        <h3>Turbidity</h3>
        <canvas id="turbidityChart"></canvas>
    </div>
</div>

<table class="table table-bordered table-hover">
    <thead>

        <tr>
            @*         var phReading = new SensorReading
                {
                    ParameterId = 1, // pH parameter
                    ReadingTime = DateTime.Now,
                    ReadingValue = phValue,
                    SensorId = 1
                };*@
            <th>Parameter</th>
            <th>Sensor ID</th>
            <th>Reading Tome</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {  
            <tr>
                <td>@item.Parameter.ParameterName</td>
                <td>@item.Sensor.SensorName</td>
                <td>@item.ReadingTime</td>
                <td>@item.ReadingValue</td>
            </tr>
        }
    </tbody>
</table>
<div class="position-fixed bottom-0 end-0 p-3" style="z-index: 9999">
    <div id="sensorToast" class="toast align-items-center text-white bg-danger border-0" role="alert" aria-live="assertive" aria-atomic="true">
        <div class="d-flex">
            <div class="toast-body" id="toast-message">
                <!-- Message goes here -->
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    </div>
</div>
<audio id="alert-sound" src="/sound.mp3" preload="auto"></audio>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>

<script>
    function showToast(message, bgColor = "bg-danger") {
        const toastElement = document.getElementById("sensorToast");
        const toastMessage = document.getElementById("toast-message");
        const alertSound = document.getElementById("alert-sound");

        toastElement.classList.remove("bg-danger", "bg-success", "bg-warning");
        toastElement.classList.add(bgColor);
        toastMessage.innerText = message;

        // Play sound
        if (alertSound) {
            alertSound.currentTime = 0; // rewind if it was already playing
            alertSound.play().catch(error => {
                // Autoplay may fail due to browser policy
                console.warn("Sound play failed:", error);
            });
        }

        const toast = new bootstrap.Toast(toastElement);
        toast.show();
    }


    // pH Chart
    var phCtx = document.getElementById('phChart').getContext('2d');
    var phChart = new Chart(phCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'pH Level',
                data: [],
                borderColor: 'blue',
                borderWidth: 2,
                fill: false
            }]
        },
        options: {
            scales: {
                x: { display: true },
                y: { min: 0, max: 14 }
            }
        }
    });

    // Water Level Chart
    var waterLevelCtx = document.getElementById('waterLevelChart').getContext('2d');
    var waterLevelChart = new Chart(waterLevelCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Water Level (cm)',
                data: [],
                borderColor: 'green',
                borderWidth: 2,
                fill: false
            }]
        },
        options: {
            scales: {
                x: { display: true },
                y: { min: 0, max: 4 }
            }
        }
    });


    // Turbidity Chart
    var turbidityCtx = document.getElementById('turbidityChart').getContext('2d');
    var turbidityChart = new Chart(turbidityCtx, {
        type: 'line',
        data: {
            labels: [],
            datasets: [{
                label: 'Turbidity (NTU)',
                data: [],
                borderColor: 'orange',
                borderWidth: 2,
                fill: false
            }]
        },
        options: {
            scales: {
                x: { display: true },
                y: {
                    min: 0,
                    // Given the high readings of 2000+, adjust max accordingly
                    max: 100,
                    ticks: {
                        // Add custom ticks to make the scale more readable
                        callback: function (value) {

                            return value;
                        }
                    }
                }
            },
            plugins: {
                tooltip: {
                    callbacks: {
                        label: function (context) {
                            return 'Turbidity: ' + context.raw + ' NTU';
                        }
                    }
                }
            }
        }
    });

    // Connect to SignalR Hub
    var connection = new signalR.HubConnectionBuilder()
        .withUrl("/sensorHub")
        .build();

    connection.start().catch(err => alert(err));

    connection.on("ReceiveSensorData", (phValue, waterLevelValue, turbidityValue, timestamp) => {



        document.getElementById("receiver-p").innerText = `pH: ${phValue}, Water Level: ${waterLevelValue} cm, Turbidity ${turbidityValue}: ${waterLevelValue} cm, Timestamp: ${timestamp}`;
        // Check water level and show toast
        if (waterLevelValue < 2) {
            showToast(`⚠️ Water level is too low: ${waterLevelValue} cm`, "bg-warning");
            _fetchChartData();
        } else if (waterLevelValue > 3) {
            showToast(`⚠️ Water level is too high: ${waterLevelValue} cm`, "bg-danger");
        }

        if (turbidityValue < 50) {
            showToast(`⚠️ Turbidity: ${turbidityValue} cm`, "bg-warning");
            _fetchTurbChartData();
        }
        // Update pH Chart
        if (phChart.data.labels.length > 20) {
            phChart.data.labels.shift();
            phChart.data.datasets[0].data.shift();
        }
        phChart.data.labels.push(timestamp);
        phChart.data.datasets[0].data.push(phValue);
        phChart.update();

        // Update Water Level Chart
        if (waterLevelChart.data.labels.length > 20) {
            waterLevelChart.data.labels.shift();
            waterLevelChart.data.datasets[0].data.shift();
        }
        waterLevelChart.data.labels.push(timestamp);
        waterLevelChart.data.datasets[0].data.push(waterLevelValue);
        waterLevelChart.update();

        // Update Turbidity Chart
        if (turbidityChart.data.labels.length > 20) {
            turbidityChart.data.labels.shift();
            turbidityChart.data.datasets[0].data.shift();
        }
        turbidityChart.data.labels.push(timestamp);
        turbidityChart.data.datasets[0].data.push(turbidityValue);
        turbidityChart.update();

    });
    function _fetchChartData() {
        
        $.get('/alerts/create', function (data) {
            showToast(`⚠️ email sent to users`, "bg-primary");

        });
    }
    function _fetchTurbChartData() {
        
        $.get('/alerts/createtu', function (data) {
            showToast(`⚠️ email sent to users`, "bg-primary");

        });
    }

</script>
